<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>账号登陆流程之（获取服务器列表）</title>
    <link href="/2023/04/02/%E8%B4%A6%E5%8F%B7%E7%99%BB%E9%99%86%E6%B5%81%E7%A8%8B/"/>
    <url>/2023/04/02/%E8%B4%A6%E5%8F%B7%E7%99%BB%E9%99%86%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>本周完成了一个较完整的登陆流程（获取服务器，创建\删除角色，选择角色并进入游戏），本文记录一下获取服务器的流程</p><p>这部分的实现是这样的：</p><p>1.在客户端添加一个组件ServerInfosComponent， 组件用一个列表来记录后端下发的服务器信息，图中有两个标签</p><p>[ChildType(typeof(ServerInfo))]是用来约束这个组件能添加的子实体类型</p><p>[ComponentOf(typeof(Scene))]是用说明这个组件能被哪个组件添加<br><img src="/2023/04/02/%E8%B4%A6%E5%8F%B7%E7%99%BB%E9%99%86%E6%B5%81%E7%A8%8B/img1.png"></p><p>2.后端添加一个组件ServerInfosManagerComponent， 也用一个列表来记录服务器信息，服务器信息的填充如下图<br><img src="/2023/04/02/%E8%B4%A6%E5%8F%B7%E7%99%BB%E9%99%86%E6%B5%81%E7%A8%8B/img2.png"></p><p>1）先从数据库中查询是否有服务器数据，DBManagerComponent是一个单例组件，用来完成对数据库的增删改查操作</p><p>2）如果数据库中没有数据，则从表格配置中生成数据。框架中的表格数据放在 工程目录\Excel下，编辑好表格后运行目录下的win_startExcelExport.bat文件，即可生成可读取表格数据的代码（例如下图中ServerInfoConfigCategory），之后将配置好的数据序列化成前端需要的数据，随后发送给前端并保存到数据库</p><p>图中标签[FriendClass(typeof(ServerInfo))]表示这个组件能访问标签指定的成员</p><p>3.前端通过调用协议获取后端数据，并显示在界面中</p><p>1）需要获取后端响应的消息通过zoneScene.GetComponent<SessionComponent>()Session.Call()去请求</p><p>2）框架中的UI使用的是EUI框架，这边就先不详细解释使用的细节了<br><img src="/2023/04/02/%E8%B4%A6%E5%8F%B7%E7%99%BB%E9%99%86%E6%B5%81%E7%A8%8B/img3.png"></p><p>之后，选中其中一个区服，点击确认，就可以开始创建角色了，<br><img src="/2023/04/02/%E8%B4%A6%E5%8F%B7%E7%99%BB%E9%99%86%E6%B5%81%E7%A8%8B/img4.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>框架的前后端通讯</title>
    <link href="/2023/03/25/%E6%A1%86%E6%9E%B6%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E9%80%9A%E8%AE%AF/"/>
    <url>/2023/03/25/%E6%A1%86%E6%9E%B6%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E9%80%9A%E8%AE%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="protobuf"><a href="#protobuf" class="headerlink" title="protobuf"></a>protobuf</h3><h5 id="1-什么是protobuf"><a href="#1-什么是protobuf" class="headerlink" title="1.什么是protobuf?"></a>1.什么是protobuf?</h5><p>  protobuf是Google公司提出的一种轻便高效的结构化数据存储格式，常用于结构化数据的序列化，具有语言无关、平台无关、可扩展性特性，常用于通讯协议、服务端数据交换场景</p><h5 id="2-为什么要使用protobuf作为数据传输协议？"><a href="#2-为什么要使用protobuf作为数据传输协议？" class="headerlink" title="2.为什么要使用protobuf作为数据传输协议？"></a>2.为什么要使用protobuf作为数据传输协议？</h5><pre><code class="hljs">protobuf优势：1）类型安全2）易用性好3）序列化/反序列性能好4）兼容性好5）不仅可以定义结构体，还可以定义rpc服务接口劣势：1）可读性较差：没有schema的情况下，难以阅读和编辑。2）灵活性较差：无法动态修改schema。json: https://www.json.org/json-zh.html优势：1）可读性好：方便理解和编辑2）易用性好：使用简单灵活性好：支持动态修改schema劣势：序列化/反序列化性能差编码问题导致解析失败之类的</code></pre><p>PS：在我做过的几款项目中，前面两款都是用protobuf消息协议，后面的项目使用的是Json，可能是protobuf用惯了，<br>在使用Json时感受到了其反序列化时的痛苦，而且有时候后端偷偷删掉了某个字段还会导致解析失败，简直是头疼。</p><h4 id="3-Protobuf为什么这么快"><a href="#3-Protobuf为什么这么快" class="headerlink" title="3.Protobuf为什么这么快?"></a>3.Protobuf为什么这么快?</h4><p> 一个protobuf消息：<br> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">message Person<br>&#123;<br>    required int32 Id = <span class="hljs-number">1</span>;<br>    required string Name = <span class="hljs-number">2</span>;<br>    required string Hobby = <span class="hljs-number">3</span>;<br>    required string Introduction = <span class="hljs-number">4</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>假如一样的消息通过Json来传，每个消息体需要把某个数据是属于哪个字段的信息一起下发(例如 id : 1), 而protobuf不需要将这个字段名一起带到消息中，那它是如何区分数据属于哪个字段呢:</p><p>现在有个Person消息是这样的 id &#x3D; 1, Name &#x3D; Cwp, Hobby &#x3D; Play tennis, Introduction &#x3D; Hello word</p><p>protobuf会将这个消息以这种形式写入</p><h5 id="Tag1TagCwpTagPlay-tennisTagHello-Word"><a href="#Tag1TagCwpTagPlay-tennisTagHello-Word" class="headerlink" title="Tag1TagCwpTagPlay tennisTagHello Word"></a>Tag1TagCwpTagPlay tennisTagHello Word</h5><h5 id="Tag是如何来的？"><a href="#Tag是如何来的？" class="headerlink" title="Tag是如何来的？"></a>Tag是如何来的？</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">makeTag</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> fieldNumber, <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> wireType)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span>(fieldNumber &lt;&lt; <span class="hljs-number">3</span>) | wireType<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="fieldNumer：即消息定义时-“-x3D-”-号右边的数字，这也就是为什么定义完一个消息后就不允许再修改这个值的原因-修改后Tag也会变，从而导致解析失败"><a href="#fieldNumer：即消息定义时-“-x3D-”-号右边的数字，这也就是为什么定义完一个消息后就不允许再修改这个值的原因-修改后Tag也会变，从而导致解析失败" class="headerlink" title="fieldNumer：即消息定义时 “&#x3D;” 号右边的数字，这也就是为什么定义完一个消息后就不允许再修改这个值的原因(修改后Tag也会变，从而导致解析失败)"></a>fieldNumer：即消息定义时 “&#x3D;” 号右边的数字，这也就是为什么定义完一个消息后就不允许再修改这个值的原因(修改后Tag也会变，从而导致解析失败)</h6><h6 id="wireType：字段类型，即int32-string等，protobuf支持的类型如下图，-0-5转为二进制最高用3位就能表示全，故需要将fieldNumber左移三位，后三位用wireType的二进制补全，这样解析的时候只需要取后三位就能知道类型"><a href="#wireType：字段类型，即int32-string等，protobuf支持的类型如下图，-0-5转为二进制最高用3位就能表示全，故需要将fieldNumber左移三位，后三位用wireType的二进制补全，这样解析的时候只需要取后三位就能知道类型" class="headerlink" title="wireType：字段类型，即int32, string等，protobuf支持的类型如下图， 0-5转为二进制最高用3位就能表示全，故需要将fieldNumber左移三位，后三位用wireType的二进制补全，这样解析的时候只需要取后三位就能知道类型"></a>wireType：字段类型，即int32, string等，protobuf支持的类型如下图， 0-5转为二进制最高用3位就能表示全，故需要将fieldNumber左移三位，后三位用wireType的二进制补全，这样解析的时候只需要取后三位就能知道类型</h6><p> <img src="/2023/03/25/%E6%A1%86%E6%9E%B6%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E9%80%9A%E8%AE%AF/writeType.png"></p><h5 id="Tag分隔符为一个字节，如果传输的内容中出现相同的字节，那么不会导致解析错误吗？"><a href="#Tag分隔符为一个字节，如果传输的内容中出现相同的字节，那么不会导致解析错误吗？" class="headerlink" title="Tag分隔符为一个字节，如果传输的内容中出现相同的字节，那么不会导致解析错误吗？"></a>Tag分隔符为一个字节，如果传输的内容中出现相同的字节，那么不会导致解析错误吗？</h5><p>实际上是不会的，protobuf避免了这种情况：</p><pre><code class="hljs">  例如有个数据为267， 用二进制表示是     00000000 00000000 00000001 00001011 (256 + 8 + 2 + 1)  其中前两个字节都是0，属于无效字节，protobuf会将其舍弃，上述字节变成以下形式    10001011 00000010 ，每个字节的后面七位才是属于数据本身， 第一个字节(10001011)中后七位取的是原数据二进制的低  七位（大小端?，这里没有进一步了解，先记录下来）, 取完后发现再往前还有有效数据（往前还有非0的数据），所以第8位置  为1, 1代表下一个字节（00000010）还是属于该数据, 第二个字节(00000010)是从原二进制右移七位后截取低7位截取的，  取完后此时再往前的数据都是0，所以第8位置0，这个时候代表下一个字节的数据已经不是该数据（267）了。    另外,protobuf是以Tag-Length-Value形式编码的（Tag为分隔符，Length为数据长度，Value则是数据），那么如果一开始  是要传输一个数字，取到第一个tag的时候，解析出它的fieldNumber和writeType, 如果高位为1则表示下一个字节还是该数字，  如果为0则表示下一个字节是Tag. 而如果一开始传输的是一个字符串，拿到Tag后，就知道下一个数据是一个字符串，所以下一  个字节开始作为Length解析，遇到0的话就知道value的长度了（字节解析后的值），然后根据这个长度去取出字符串，取完后  下一个字节就是Tag了，以此类推, protobuf永远知道哪一个字节是Tag    </code></pre><p> 以上内容参考自：<br> B站 <a href="https://www.bilibili.com/video/BV1Qh411Q7yY/?spm_id_from=333.337.search-card.all.click&vd_source=b5e57c1b7d51c4eef6257043ceabc862">Protobuf为什么这么快？</a><br> 知乎<a href="https://zhuanlan.zhihu.com/p/559950962">Protobuf编码原理</a></p><h3 id="在框架中使用protobuf"><a href="#在框架中使用protobuf" class="headerlink" title="在框架中使用protobuf"></a>在框架中使用protobuf</h3><p> 在 工程目录&#x2F;Proto目录 下有四个文件：</p><p> InnerMessage.proto    ：服务器内部通讯的消息数据<br> MongoMessage.proto    ：服务器内部通讯的消息数据，可以传输entity<br> OuterMessage.proto    ： 用来定义客户端发送到服务端的消息数据<br> win_startProtoExport.bat  ：定义完消息数据后执行这个文件，会生成对应的类在项目代码中</p><h4 id="OuterMessage"><a href="#OuterMessage" class="headerlink" title="OuterMessage"></a>OuterMessage</h4> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//ResponseType M2C_TestResponse // 标明回复的消息类型是M2C_TestResponse</span><br>message C2M_TestRequest <span class="hljs-comment">// IActorLocationRequest</span><br>&#123;<br>int32 RpcId = <span class="hljs-number">90</span>;      <span class="hljs-comment">// RpcId标明这个消息需要后端回复</span><br>string request = <span class="hljs-number">1</span>;<br>&#125;<br><br>message M2C_TestResponse <span class="hljs-comment">// IActorLocationResponse</span><br>&#123;<br>int32 RpcId = <span class="hljs-number">90</span>;<br>int32 Error = <span class="hljs-number">91</span>;<br>string Message = <span class="hljs-number">92</span>;<br>string response = <span class="hljs-number">1</span>;<br>&#125;<br><br>IActorLocationRequest : 标明这个请求需要后端回复<br>IActorLocationResponse :  标明这个消息是后端回复给客户端的<br><br><span class="hljs-comment">// 客户端发送的不需要回复的消息</span><br>message C2R_Test <span class="hljs-comment">// IMessage </span><br>&#123;<br>    string Test1 = <span class="hljs-number">1</span>:<br>&#125;<br><br><span class="hljs-comment">// 后端发送的不需要回复的消息</span><br>message R2C_Test <span class="hljs-comment">// IMessage </span><br>&#123;<br>    string Test = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ET中前后端通讯的消息分为两类</p><p>1） 客户端可以直接发送给服务端的消息<br>2） 客户端消息必须通过网管服转发到服务端，此类消息在框架中被称为ActorLocation消息</p><h4 id="框架中如何使用"><a href="#框架中如何使用" class="headerlink" title="框架中如何使用"></a>框架中如何使用</h4><p>客户端发送消息的伪代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">Seeion session = zoneScene.<span class="hljs-built_in">GetComponent</span>&lt;NetKcpComponent&gt;().<span class="hljs-built_in">Create</span>(NetWorkHelper.<span class="hljs-built_in">ToIPEndPoint</span>(address));<br><br><span class="hljs-comment">// 使用后Call是需要后端回复的请求</span><br>R2C_Login r2c_Login = (R2C_Login) await session.<span class="hljs-built_in">Call</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">R2c_Login</span>() &#123;...&#125;);<br><br><span class="hljs-comment">// 回复的结果 r2c_Login.xxx</span><br><br><span class="hljs-comment">// 使用Send是不需要后端回复的消息</span><br>session.<span class="hljs-built_in">Send</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">C2R_Test</span>());<br> <br></code></pre></td></tr></table></figure><p>后端处理消息的伪代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 这个标签表示这个函数使用来处理消息请求的</span><br>[MessageHandler]<br> <br> <span class="hljs-comment">// AMRpcHandle说明是需要回复的消息</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C2R_LoginHandler</span> : AMRpcHandle&lt;C2R_Login, R2C_Login&gt; <span class="hljs-comment">// 消息请求以及回复的类型</span><br> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> async ETTask  <span class="hljs-title">Run</span><span class="hljs-params">(Session session, C2R_Login request, R2C_Login response, Action reply)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// request 请求的内容</span><br>        <span class="hljs-comment">// response要回复的内容</span><br>        <span class="hljs-comment">// 处理完毕</span><br>        <span class="hljs-built_in">reply</span>();<br>        await ETTask.CompletedTask;<br>    &#125;<br> &#125;<br> <br> [MessageHandler]<br> <span class="hljs-comment">// AMHandler是不需要回复的</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C2R_Test</span> : AMHandler&lt;C2RTest&gt;<br> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> async ETTask <span class="hljs-title">Run</span><span class="hljs-params">(Session session, C2R_Test message)</span></span><br><span class="hljs-function">    </span>&#123;<br>    <br>        <span class="hljs-comment">// 后端也可以直接下推消息</span><br>        session.<span class="hljs-built_in">Send</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">R2C_Test</span>());<br>        await ETTask.CompletedTask;<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>客户端处理后端主动推送消息的伪代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br>[MessageHandler]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">R2C_Test</span> : AMHandler&lt;R2C_Test&gt;<br> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> async ETTask <span class="hljs-title">Run</span><span class="hljs-params">(Session session, R2C_Test message)</span></span><br><span class="hljs-function">    </span>&#123;<br>    <br>        ...<br>    &#125;<br> &#125;<br><br></code></pre></td></tr></table></figure><p>注：上面的C2R_Login是IActorReueqst类型，在ET中还有一种IActorLocationRequest类型，这两种类型的区分在这里先不记录，在<br>后面开发有遇到的时候再研究其区分。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>登录功能</title>
    <link href="/2023/03/25/%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/"/>
    <url>/2023/03/25/%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<p>关于ET这个框架，我想的是先不深入学习这个框架的设计思路以及原理，先跟着从功能做起，再从功能中涉及到的代码去探究原理</p><h2 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h2><h3 id="服务器架构"><a href="#服务器架构" class="headerlink" title="服务器架构"></a>服务器架构</h3><p><img src="/2023/03/25/%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/login.png"></p><p>如上图所示，服务器由多个进程组成（可以去了解下分布式，这边就不记录分布式这个概念了），玩家在登录时首先会访问到网关服，那为什么不直接连接到游戏服务器呢？对此我的理解是，游戏服务器一般需要处理很多逻辑运算操作，如果请求数量过多时，会造成请求处理过慢等问题。所以如果在玩家到服务器这段连接中加入一个网关服务器，这个网关服务器负责接受玩家请求以及将游戏服务器处理完的结果下发给玩家，这样游戏服务器就能专心处理逻辑运算功能。<br>游戏服务器和DB数据库之间又有一层游戏数据库代理进程，这是因为如果游戏服务器直接连到数据库的话会造成大量的IO操作，也会影响到运算速度。而加入游戏数据库代理进程后，这个进程会将数据进行缓存，玩家访问时游戏服务器可以从数据库代理进程直接读取不需要有IO操作，玩家存储数据时则先存在数据库代理进程，代理进程将定时把这些数据持久化到DB数据库中。</p><h3 id="ET中的登录流程部分代码-并非完整代码，只截取了主要部分"><a href="#ET中的登录流程部分代码-并非完整代码，只截取了主要部分" class="headerlink" title="ET中的登录流程部分代码(并非完整代码，只截取了主要部分)"></a>ET中的登录流程部分代码(并非完整代码，只截取了主要部分)</h3> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> async ETTask <span class="hljs-title">Login</span><span class="hljs-params">(Scene zoneScene, string address,  string account,  string password)</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-comment">// 创建一个ETModel层的Session</span><br>    R2C_Login r2CLogin;<br>    Session session =  zoneScene.<span class="hljs-built_in">GetComponent</span>&lt;NetKcpComponent&gt;().<span class="hljs-built_in">Create</span>(NetworkHelper.<span class="hljs-built_in">ToIPEndPoint</span>(address));<br>    &#123;<br>        <span class="hljs-comment">// 这边的处理是首先通过配置的随机获取一个网关服，此时会生成一个Token作为连接许可的令牌，并将网关IP以及令牌返回给客户端</span><br>        r2CLogin = (R2C_Login) await session.<span class="hljs-built_in">Call</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">C2R_Login</span>() &#123;Account = account, Password = password &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">//</span><br>    session?.<span class="hljs-built_in">Dispose</span>();<br><br>     <span class="hljs-comment">// 创建一个gate Session,并且保存到SessionComponent中</span><br>    Session gateSession = zoneScene.GetComponent&lt;<span class="hljs-built_in">NetKcpComponent</span>().<span class="hljs-built_in">Create</span>(NetworkHelper.<span class="hljs-built_in">ToIPEndPoint</span>(r2CLogin.Address));<br>    gateSession.<span class="hljs-built_in">AddComponent</span>&lt;PingComponent&gt;();<br>    zoneScene.<span class="hljs-built_in">AddComponent</span>&lt;SessionComponent&gt;().Session = gateSession;<br><br>    <span class="hljs-comment">// 网关进程跟客户端正式连接</span><br>    G2C_LoginGate g2CLoginGate = (G2C_LoginGate)await gateSession.<span class="hljs-built_in">Call</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">C2G_LoginGate</span>() &#123; Key = r2CLogin.Key, GateId = r2CLogin.GateId&#125;);<br>    Game.EventSystem.<span class="hljs-built_in">Publish</span>(<span class="hljs-keyword">new</span> EventType.<span class="hljs-built_in">LoginFinish</span>() &#123;ZoneScene = zoneScene&#125;);<br>&#125; <br><br></code></pre></td></tr></table></figure><p>上述代码具体流程是</p><p>1.客户端请求后端分配一个空闲的网关（分配由一个Realm网关负载均衡服务器完成，这个服务器这边先不深入其功能，知道有这个东西就行）<br>2.这个被分配的网关会生成一个Token(可以理解为令牌)，客户端会取到这个Token并作为后续请求的验证手段<br>3.连接完网关后，网关会建立一个客户端与游戏服务器的Unit映射关系，通过这个映射，网关可以转发客户端到游戏服务器之间的消息<br>4.连接过程中需要一个Location定位服务器，这个服务器为网关提供客户端的Unit映射所在的游戏服务器进程</p><h2 id="Scene"><a href="#Scene" class="headerlink" title="Scene"></a>Scene</h2><p>以下内容参考链接 <a href="https://blog.csdn.net/Q540670228/article/details/123416617#ETScene_130">ET框架的基础逻辑</a><br>上面的代码中，出现了Scene这个参数。这个Scene在ET中是作为一个根节点的Entity:</p><h4 id="客户端中的Scene："><a href="#客户端中的Scene：" class="headerlink" title="客户端中的Scene："></a>客户端中的Scene：</h4><p><img src="/2023/03/25/%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/GameScene.png"></p><h5 id="1-GameScene"><a href="#1-GameScene" class="headerlink" title="1.GameScene:"></a>1.GameScene:</h5><pre><code class="hljs">游戏客户端全局的Scene根节点，可用做客户端基础功能组件（例如资源管理、计时器管理等等）</code></pre><h5 id="2-ZoneScene"><a href="#2-ZoneScene" class="headerlink" title="2.ZoneScene"></a>2.ZoneScene</h5><pre><code class="hljs">用于提供玩家游戏业务功能逻辑组件（例如基础UI、任务、背包组件等），重连的时候可以重新加载这些组件</code></pre><h5 id="3-CurrentScene"><a href="#3-CurrentScene" class="headerlink" title="3.CurrentScene"></a>3.CurrentScene</h5><pre><code class="hljs">用于代表玩家当前所在的地图（关卡）场景，一般用于挂载当前场景相关的组件，切换或者释放场景时回收此Scene以及其所有子实体和组件</code></pre><h4 id="服务端中的Scene："><a href="#服务端中的Scene：" class="headerlink" title="服务端中的Scene："></a>服务端中的Scene：</h4><p><img src="/2023/03/25/%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/ServerGameScene.png"></p><h5 id="1-GameScene-1"><a href="#1-GameScene-1" class="headerlink" title="1.GameScene:"></a>1.GameScene:</h5><pre><code class="hljs">类似客户端，用来挂载全局服务端所需要的基础公共功能组件（如图中的NetKcpComponent，用于通讯的）</code></pre><h5 id="2-ZoneScene-1"><a href="#2-ZoneScene-1" class="headerlink" title="2.ZoneScene"></a>2.ZoneScene</h5><pre><code class="hljs">1）可以创建多个不同功能的ZoneScene,每个不同功能的ZoneScene下挂载其应该具有的功能组件，例如网关下   的NetKcpComponent,定位服务器的LocationComponent等，一般通过SceneType的枚举对其进行逻辑分发   2）不同ZoneScene可以存在一个进程上面，也可以每个ZoneScene运行在一个单独的进程上，不同ZoneScene进程   甚至可以分布在服务器集群上，大大提高了运行效率   3）可以动态创建和销毁（类似创建临时副本场景）</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ET的安装</title>
    <link href="/2023/03/25/ET%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <url>/2023/03/25/ET%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么选择ET这个框架"><a href="#为什么选择ET这个框架" class="headerlink" title="为什么选择ET这个框架"></a>为什么选择ET这个框架</h2><pre><code class="hljs">1.本人第一款游戏后端使用的就是ET框架，可以算是入行后第一个接触的框架2.最强主播项目中，有部分功能是借鉴ET框架中的设计（Entity以及Component）3.这个框架现在有比较多的正式上线项目的验证，而且也有很多博客以及教程</code></pre><p> 终上，决定我的项目就以这个框架为基础</p><p> 框架链接 <a href="https://github.com/egametang/ET">ET框架</a> （本人使用的是release6.0版本，现在作者已经更新到7.0版本）<br> 具体的安装步骤在Git里已经有完整的教学了，这边就不记录了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>起</title>
    <link href="/2023/03/25/hello-world/"/>
    <url>/2023/03/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>   时隔两年，终于又一次打开了博客。</p><p>  其实之前在这个博客上是写了几篇文章的，但是在我重新部署博客的时候不小心把之前的都删了（用不熟练的东西还是得要备份啊！蛮打蛮撞得跟着步骤又重新部署完了）</p><p>  之前写的文章都是在还未入行游戏编程相关，从正式成为游戏开发者后就没再写过文章（真的不是因为996）</p><p>  这两年多以来也参与开发过几款游戏：</p><p>  1.怪物工程馆师（MMO手游），已在taptap上线<br>  2.魔法合成之旅（放置卡牌手游），在taptap进行过篝火测试<br>  3.最强主播（卡牌养成手游），在海外上线</p><p>  在这几款项目中，本人主要负责的是前端开发（也参与过部分后端开发）。怪物工程师项目中主要负责做一些核心玩法界面，后端功能完成了月卡功能，独立接入穿山甲SDK并独立完成调用模块开发。魔法合成之旅项目中绝大多数界面都是本人负责的，包括关卡界面以及装备、技能等养成界面，完善了界面管理功能（以栈结构来实现界面跳转，打开等功能），还有做了一些工具（例如方便策划配剧情的工具）。最强主播项目也是负责运营活动的前端开发以及工具（Json文件转protobuf文件）。</p><p>  虽说两年的前端开发过程中自己从完全不会C#以及Unity，到现在已经能熟练的使用C#语言以及Unity引擎和插件，也能用合理的代码（设计模式以及面向对象）去实现功能。但是有时候问自己到底有哪些成长也给不出个答案。</p><p>  工作过程中有接触一些常用的框架，闲时也一直在跟着学习，但却没有真正的着手去实践过。所以现在有个想法是根据学到的内容以及一些开源框架，尝试自己能否独立的从零开始开发一款游戏。</p><p>  故重新写博客来记录这个过程，就算最后结果是失败的，也得让自己真正学进去的东西有迹可循。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
